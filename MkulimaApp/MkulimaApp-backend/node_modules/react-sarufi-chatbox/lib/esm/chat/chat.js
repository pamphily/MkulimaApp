var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from "axios";
import React, { useEffect, useState } from "react";
// Local imports
import "./chat.css";
import Chatbox from "./chatbox";
import { Close, MinusIcon } from "../assets/icons";
import { SarufiIcon } from "../assets/illustrations";
import { getChatId } from "./services/chat-id-handler";
var Chat = function (_a) {
    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    var botId = _a.botId, token = _a.token, defaultTheme = _a.theme, _u = _a.popUpShow, popUpShow = _u === void 0 ? true : _u;
    var _v = useState(false), open = _v[0], setOpen = _v[1];
    var _w = useState(getChatId()), id = _w[0], setId = _w[1];
    var _x = useState(false), showPopup = _x[0], setShowPopup = _x[1];
    var _y = useState(false), dontShowPopup = _y[0], setDontShowPopup = _y[1];
    var _z = useState({
        primaryColor: "#2776EA",
        borderColor: "lightgray",
        fontSize: "14",
        fontFamily: "InterRegular",
        sentBoxBg: "#D8F9D4",
        receivedBoxBg: "white",
        sentBoxColor: "black",
        receivedBoxColor: "black",
        chatboxBg: "#EDECE1",
        receivedBoxLinkColor: "blue",
        sentBoxLinkColor: "white",
        buttonSize: "md",
        mode: "light",
        title: "Chat",
        placement: "right",
        height: 500,
        width: 400,
    }), theme = _z[0], setThemeConfig = _z[1];
    var api_url = "https://api.sarufi.io";
    var modal = document.createElement("div");
    modal.id = "sarufi-modal";
    if (!document.getElementById("sarufi-modal"))
        document.body.appendChild(modal);
    // get theme
    var fetchTheme = function () { return __awaiter(void 0, void 0, void 0, function () {
        var data, error_1;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (defaultTheme) {
                        return [2 /*return*/, setThemeConfig(defaultTheme)];
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios.get(
                        // @ts-ignore
                        "".concat(api_url, "/plugin/").concat((_a = window === null || window === void 0 ? void 0 : window.botId) !== null && _a !== void 0 ? _a : botId, "/unauthenticated"))];
                case 2:
                    data = (_b.sent()).data;
                    if (Object.keys(data.theme_config).length === 0)
                        return [2 /*return*/];
                    setThemeConfig(data === null || data === void 0 ? void 0 : data.theme_config);
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _b.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); };
    useEffect(function () {
        fetchTheme();
    }, [defaultTheme]);
    useEffect(function () {
        if (dontShowPopup || !popUpShow)
            return;
        if (showPopup)
            return;
        // Show popup after 5 seconds
        setTimeout(function () {
            setShowPopup(!showPopup);
        }, 5000);
    }, [showPopup]);
    // set up styles
    var style = {
        "--sarufi-primary-color": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "#202C33" : (_b = theme === null || theme === void 0 ? void 0 : theme.primaryColor) !== null && _b !== void 0 ? _b : "#2776EA",
        "--sarufi-secondary-color": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "#202C33" : (_c = theme === null || theme === void 0 ? void 0 : theme.secondaryColor) !== null && _c !== void 0 ? _c : "#EDECE1",
        "--sarufi-font-size": "".concat((_d = theme === null || theme === void 0 ? void 0 : theme.fontSize) !== null && _d !== void 0 ? _d : 14, "px"),
        "--sarufi-font-family": (theme === null || theme === void 0 ? void 0 : theme.fontFamily) === "InterRegular"
            ? "'Inter', sans-serif"
            : (theme === null || theme === void 0 ? void 0 : theme.fontFamily) === "PoppinsRegular"
                ? "'Poppins', sans-serif"
                : (theme === null || theme === void 0 ? void 0 : theme.fontFamily) === "inherit"
                    ? "inherit"
                    : "'Inter', sans-serif",
        "--sarufi-border-color": (_e = theme === null || theme === void 0 ? void 0 : theme.borderColor) !== null && _e !== void 0 ? _e : "lightgray",
        "--sarufi-sent-box-bg": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "#005C4B" : (_f = theme === null || theme === void 0 ? void 0 : theme.primaryColor) !== null && _f !== void 0 ? _f : "#2776EA",
        "--sarufi-received-box-bg": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "#202C33" : (_g = theme === null || theme === void 0 ? void 0 : theme.secondaryColor) !== null && _g !== void 0 ? _g : "#EDECE1",
        "--sarufi-sent-box-color": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "white" : "white",
        "--sarufi-received-box-color": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "white" : (_h = theme === null || theme === void 0 ? void 0 : theme.receivedBoxColor) !== null && _h !== void 0 ? _h : "black",
        "--sarufi-sent-box-link-color": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "#53BDEB" : (_j = theme === null || theme === void 0 ? void 0 : theme.sentBoxLinkColor) !== null && _j !== void 0 ? _j : "black",
        "--sarufi-received-box-link-color": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark"
            ? "#53BDEB"
            : (_k = theme === null || theme === void 0 ? void 0 : theme.receivedBoxLinkColor) !== null && _k !== void 0 ? _k : "black",
        "--sarufi-chatbox-bg": (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark" ? "#0B141A" : "white",
        "--sarufi-chatbox-height": (theme === null || theme === void 0 ? void 0 : theme.height) ? (theme === null || theme === void 0 ? void 0 : theme.height) + "px" : "500px",
        "--sarufi-chatbox-width": (theme === null || theme === void 0 ? void 0 : theme.width) ? (theme === null || theme === void 0 ? void 0 : theme.width) + "px" : "400px",
    };
    return (React.createElement("div", { className: "sarufi-chat-container ".concat((theme === null || theme === void 0 ? void 0 : theme.placement) === "left" ? "sarufi-left-align" : "sarufi-right-align", " ").concat(open ? "open" : "", "\n      ").concat(open ? "sarufi-shadow-xl" : "sarufi-flex-center"), style: __assign(__assign({ position: "fixed", 
            // border: "2px solid #000",
            fontFamily: (theme === null || theme === void 0 ? void 0 : theme.fontFamily) === "InterRegular"
                ? "'Inter', sans-serif"
                : (theme === null || theme === void 0 ? void 0 : theme.fontFamily) === "PoppinsRegular"
                    ? "'Poppins', sans-serif"
                    : (theme === null || theme === void 0 ? void 0 : theme.fontFamily) === "inherit"
                        ? "inherit"
                        : "'Inter', sans-serif" }, (!open
            ? {
                height: (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "lg" ? "70px" : "50px",
                width: showPopup
                    ? "fit-content"
                    : (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "lg"
                        ? "70px"
                        : "50px",
            }
            : {})), style) },
        !open && (React.createElement("button", { className: "sarufi-shadow-xl ".concat(showPopup && "sarufi-floating"), style: {
                display: showPopup ? "flex" : "inline-flex",
                justifyContent: "center",
                alignItems: "center",
                position: "relative",
                cursor: "pointer",
                borderRadius: showPopup ? "50px" : "50%",
                padding: showPopup ? ".5rem 1rem" : undefined,
                height: (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "lg"
                    ? "70px"
                    : (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "sm"
                        ? "30px"
                        : "50px",
                width: showPopup
                    ? "100%"
                    : (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "lg"
                        ? "70px"
                        : (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "sm"
                            ? "30px"
                            : "50px",
                background: (_l = theme === null || theme === void 0 ? void 0 : theme.primaryColor) !== null && _l !== void 0 ? _l : "#2776EA",
                color: "white",
                border: "none",
            }, onClick: function () {
                setOpen(true);
                setShowPopup(false);
                setDontShowPopup(true);
            } },
            React.createElement(SarufiIcon, { size: (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "lg"
                    ? 40
                    : (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "sm"
                        ? 20
                        : 30 }),
            React.createElement("div", { style: {
                    display: showPopup ? "block" : "none",
                    width: "fit-content",
                    opacity: showPopup ? 1 : 0,
                    marginLeft: "5px",
                    textAlign: "start",
                    fontSize: "".concat((theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "sm" ? "10px" : "var(--sarufi-font-size)"),
                } },
                React.createElement("p", { style: { fontWeight: "bold" } }, (_m = theme === null || theme === void 0 ? void 0 : theme.bubbleTitle) !== null && _m !== void 0 ? _m : "Need Help?"),
                React.createElement("p", null, (_o = theme === null || theme === void 0 ? void 0 : theme.bubbleSubTitle) !== null && _o !== void 0 ? _o : "Ask me")))),
        React.createElement("div", { style: {
                height: "100%",
                display: open ? "block" : "none",
                // borderRadius: "18px",
                // overflow: "hidden",
            } },
            React.createElement("div", { className: "sarufi-flex-wide text-neutral-0", style: {
                    // height: "42px",
                    borderTopLeftRadius: "18px",
                    borderTopRightRadius: "18px",
                    padding: "1rem",
                    paddingLeft: "1rem",
                    paddingRight: "1rem",
                    background: "var(--sarufi-primary-color)",
                    color: "white",
                } },
                React.createElement("div", { className: "sarufi-flex sarufi-align-center" },
                    React.createElement("div", { className: "sarufi-flex-center", style: {
                            background: (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark"
                                ? theme === null || theme === void 0 ? void 0 : theme.secondaryColor
                                : "var(--sarufi-secondary-color)",
                            borderRadius: "50%",
                            padding: ".5rem",
                            marginRight: "10px",
                            position: "relative",
                        } },
                        React.createElement(SarufiIcon, { style: {
                                color: (theme === null || theme === void 0 ? void 0 : theme.mode) === "dark"
                                    ? theme === null || theme === void 0 ? void 0 : theme.primaryColor
                                    : "var(--sarufi-primary-color)",
                            }, size: (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "lg"
                                ? 40
                                : (theme === null || theme === void 0 ? void 0 : theme.buttonSize) === "sm"
                                    ? 20
                                    : 30 }),
                        React.createElement("div", { style: {
                                position: "absolute",
                                bottom: "0",
                                right: "1px",
                                background: "#02B272",
                                borderRadius: "50%",
                                width: "10px",
                                height: "10px",
                            } })),
                    React.createElement("div", null,
                        React.createElement("p", { className: "sarufi-ellipsed-text", style: {
                                fontWeight: 600,
                                marginBottom: "3px",
                                fontFamily: "var(--sarufi-font-family)",
                                fontSize: (theme === null || theme === void 0 ? void 0 : theme.fontSize)
                                    ? Number(theme === null || theme === void 0 ? void 0 : theme.fontSize) * 1.1
                                    : "1.1em",
                            } }, theme === null || theme === void 0 ? void 0 : theme.title),
                        React.createElement("p", { style: {
                                fontFamily: "var(--sarufi-font-family)",
                                fontSize: "12px",
                            } }, "Online"))),
                React.createElement("div", { className: "flex-center" },
                    React.createElement("button", { className: "flex-center sarufi-button", onClick: function () { return setOpen(false); }, style: {
                            border: "none",
                            background: "none",
                            color: "white",
                            cursor: "pointer",
                            marginRight: "20px",
                        } },
                        React.createElement(MinusIcon, { size: 16, className: "text-neutral-0" })),
                    React.createElement("button", { className: "flex-center sarufi-button", onClick: function () {
                            setOpen(false);
                            setId(getChatId(true));
                        }, style: {
                            border: "none",
                            background: "none",
                            color: "white",
                            cursor: "pointer",
                        } },
                        React.createElement(Close, { size: 18, className: "text-neutral-0" })))),
            React.createElement(Chatbox, { open: open, id: id, mode: (_p = theme === null || theme === void 0 ? void 0 : theme.mode) !== null && _p !== void 0 ? _p : "light", primaryColor: (_q = theme === null || theme === void 0 ? void 0 : theme.primaryColor) !== null && _q !== void 0 ? _q : "#2776EA", fontFamily: (_r = theme.fontFamily) !== null && _r !== void 0 ? _r : "inherit", fontSize: (_s = theme.fontSize) !== null && _s !== void 0 ? _s : 16, 
                // @ts-ignore
                botId: (_t = window === null || window === void 0 ? void 0 : window.botId) !== null && _t !== void 0 ? _t : botId, token: token, API_URL: api_url }))));
};
export default Chat;
