var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useEffect, useState } from "react";
import { FullSCreen, Pause, Play } from "../assets/icons";
import ChatLoader from "./chat-loader";
import Modal from "./modal";
var VideoPreview = function (_a) {
    var _b, _c, _d, _e, _f, _g;
    var url = _a.url, caption = _a.caption, fontFamily = _a.fontFamily, fontSize = _a.fontSize, mediaId = _a.mediaId, mode = _a.mode;
    var _h = useState(false), isPlaying = _h[0], setPlaying = _h[1];
    var _j = useState(0), currentTimeInSec = _j[0], setCurrentTimeInSec = _j[1];
    var _k = useState(0), currentTimeInMin = _k[0], setCurrentTimeInMin = _k[1];
    var _l = useState(0), mediaDurationInSec = _l[0], setMediaDurationInSec = _l[1];
    var _m = useState(0), mediaDurationInMin = _m[0], setMediaDurationInMin = _m[1];
    var _o = useState(0), currentTime = _o[0], setCurrentTime = _o[1];
    var _p = useState(0), mediaDuration = _p[0], setMediaDuration = _p[1];
    var _q = useState(false), isFullScreen = _q[0], setFullScreen = _q[1];
    var _r = useState(0), seekBeforeWidth = _r[0], setSeekBeforeWidth = _r[1];
    var _s = useState(0), bufferedRange = _s[0], setBufferRange = _s[1];
    var _t = useState(true), loading = _t[0], setLoading = _t[1];
    var _u = useState(true), isBuffering = _u[0], setBuffering = _u[1];
    var video = document.querySelector("video#".concat(mediaId, "-preview"));
    var togglePlay = function () {
        if (!isFullScreen && video) {
            setFullScreen(true);
            video.play();
            var video_elements = document.getElementsByTagName("video");
            for (var i = 0; i < video_elements.length; i++) {
                var video_element = video_elements[i];
                if (video_element.id !== mediaId) {
                    video_element.pause();
                }
            }
            var audio_elements = document.getElementsByTagName("audio");
            for (var i = 0; i < audio_elements.length; i++) {
                var audio_element = audio_elements[i];
                audio_element.pause();
            }
            return;
        }
        if (video && mediaDuration) {
            // video
            if (video === null || video === void 0 ? void 0 : video.paused) {
                video === null || video === void 0 ? void 0 : video.play();
                setPlaying(true);
            }
            else {
                video === null || video === void 0 ? void 0 : video.pause();
                setPlaying(false);
            }
        }
    };
    var changeProgressBar = function (e) {
        var value = e.target.value;
        if (video) {
            setCurrentTime(value / 1000);
            video.currentTime = value / 1000;
        }
    };
    var fullScreenToggle = function () {
        if (video) {
            setFullScreen(!isFullScreen);
            video === null || video === void 0 ? void 0 : video.requestFullscreen();
        }
    };
    useEffect(function () {
        setSeekBeforeWidth((currentTime / mediaDuration) * 100);
    }, [currentTime]);
    useEffect(function () {
        if (video) {
            video.onerror = function () {
                setLoading(false);
            };
            video.onwaiting = function () {
                setBuffering(true);
            };
            video.onplaying = function () {
                setBuffering(false);
            };
            video.onloadeddata = function () {
                setCurrentTimeInSec((video === null || video === void 0 ? void 0 : video.currentTime) % 60);
                setCurrentTimeInMin(((video === null || video === void 0 ? void 0 : video.currentTime) / 60) % 60);
                setMediaDurationInSec((video === null || video === void 0 ? void 0 : video.duration) % 60);
                setMediaDurationInMin(((video === null || video === void 0 ? void 0 : video.duration) / 60) % 60);
                setMediaDuration(video === null || video === void 0 ? void 0 : video.duration);
                setCurrentTime(video === null || video === void 0 ? void 0 : video.currentTime);
                setLoading(false);
                setBuffering(false);
            };
            video.ontimeupdate = function () {
                if (video && (video === null || video === void 0 ? void 0 : video.currentTime)) {
                    setCurrentTimeInSec((video === null || video === void 0 ? void 0 : video.currentTime) % 60);
                    setCurrentTimeInMin(((video === null || video === void 0 ? void 0 : video.currentTime) / 60) % 60);
                    setCurrentTime(video === null || video === void 0 ? void 0 : video.currentTime);
                    setSeekBeforeWidth((video.currentTime / video.duration) * 100);
                }
                if (video && (video === null || video === void 0 ? void 0 : video.duration)) {
                    setMediaDurationInSec((video === null || video === void 0 ? void 0 : video.duration) % 60);
                    setMediaDurationInMin(((video === null || video === void 0 ? void 0 : video.duration) / 60) % 60);
                    setMediaDuration(video === null || video === void 0 ? void 0 : video.duration);
                }
            };
            video.onended = function () {
                setCurrentTime(0);
                setCurrentTimeInSec(0);
                setCurrentTimeInMin(0);
                setSeekBeforeWidth(0);
                setBufferRange(0);
                setPlaying(false);
            };
        }
    }, [isPlaying, video]);
    useEffect(function () {
        if (video) {
            if (video === null || video === void 0 ? void 0 : video.played) {
                setPlaying(true);
            }
            if (video === null || video === void 0 ? void 0 : video.paused) {
                setPlaying(false);
            }
        }
    }, [video === null || video === void 0 ? void 0 : video.played, video === null || video === void 0 ? void 0 : video.paused, isFullScreen]);
    useEffect(function () {
        if (!isFullScreen && video) {
            setPlaying(false);
            video.pause();
            return;
        }
        else if (isFullScreen && video) {
            video.play();
        }
    }, [isFullScreen]);
    var style = {
        "--sarufi-video-seek-before-width": seekBeforeWidth + "%",
        "--sarufi-video-buffer-before-width": (bufferedRange / mediaDuration) * 100 + "%",
        "--sarufi-font-family": fontFamily === "InterRegular"
            ? "'Inter', sans-serif"
            : fontFamily === "PoppinsRegular"
                ? "'Poppins', sans-serif"
                : fontFamily === "inherit"
                    ? "inherit"
                    : "'Inter', sans-serif",
        "--sarufi-font-size": fontSize,
    };
    var Controllers = function (_a) {
        var _b;
        var showBottomControllers = _a.showBottomControllers;
        return (React.createElement(React.Fragment, null, (video === null || video === void 0 ? void 0 : video.duration) && !((_b = video === null || video === void 0 ? void 0 : video.error) === null || _b === void 0 ? void 0 : _b.code) && !loading ? (React.createElement("div", { className: "sarufi-video-controls", onClick: function () {
                if (!isFullScreen) {
                    togglePlay();
                }
            }, style: __assign({ height: isFullScreen ? "50px" : "100%", position: isFullScreen ? "relative" : "absolute" }, (!isFullScreen
                ? {
                    top: 0,
                    left: 0,
                    cursor: "pointer",
                }
                : {
                    backgroundColor: "rgba(0, 0, 0, .6)",
                })) },
            !showBottomControllers && (React.createElement("div", { className: "sarufi-center-controls ".concat(!isPlaying ? "sarufi-video-not-playing" : "") },
                React.createElement(React.Fragment, null,
                    React.createElement("button", { title: isPlaying ? "Pause" : "Play", style: {
                            background: "rgba(11,20,26,.35)",
                            border: "none",
                            color: "white",
                            borderRadius: "50%",
                            height: "30px",
                            width: "30px",
                            cursor: "pointer",
                        }, onClick: togglePlay, className: "sarufi-flex-center sarufi-button" }, React.createElement(Play, { size: 20 }))))),
            showBottomControllers && (React.createElement("div", { className: "sarufi-video-more-controls" },
                React.createElement("div", { className: "sarufi-more-controls-container" },
                    React.createElement("div", { className: "sarufi-flex-wide", style: {
                            padding: "0 .5rem",
                        } },
                        React.createElement("div", { className: "sarufi-video-time-controls sarufi-flex-start" },
                            React.createElement("button", { title: isPlaying ? "Pause" : "Play", style: __assign({ background: "rgba(11,20,26,.35)", border: "none", color: "white", borderRadius: "50%", height: "30px", width: "30px", cursor: "pointer" }, {
                                    "--sarufi-received-box-color": "white",
                                }), onClick: togglePlay, className: "sarufi-flex-center sarufi-button" }, isBuffering ? (React.createElement(React.Fragment, null,
                                React.createElement(ChatLoader, { fromPlay: true }))) : (React.createElement(React.Fragment, null, !isPlaying ? (React.createElement(Play, { size: 14 })) : (React.createElement(Pause, { size: 14 }))))),
                            React.createElement("span", { style: {
                                    transform: "scale(0.8)",
                                } }, currentTimeInMin < 10
                                ? "0".concat(Math.floor(currentTimeInMin))
                                : Math.floor(currentTimeInMin)),
                            "\u00A0:\u00A0",
                            React.createElement("span", { style: {
                                    transform: "scale(0.8)",
                                } }, currentTimeInSec < 10
                                ? "0".concat(Math.floor(currentTimeInSec))
                                : "".concat(Math.floor(currentTimeInSec))),
                            "\u00A0/\u00A0",
                            React.createElement("span", { style: {
                                    transform: "scale(0.8)",
                                } }, mediaDurationInMin < 10
                                ? "0".concat(Math.floor(mediaDurationInMin))
                                : Math.floor(mediaDurationInMin)),
                            "\u00A0:\u00A0",
                            React.createElement("span", { style: {
                                    transform: "scale(0.8)",
                                } }, mediaDurationInSec < 10
                                ? "0".concat(Math.floor(mediaDurationInSec))
                                : "".concat(Math.floor(mediaDurationInSec)))),
                        React.createElement("button", { className: "sarufi-video-full-screen-toggle sarufi-button", onClick: fullScreenToggle, style: {
                                cursor: "pointer",
                                background: "none",
                                border: "none",
                                color: "currentcolor",
                            } },
                            React.createElement(FullSCreen, { size: 14 }))),
                    React.createElement("div", { style: __assign({}, style), className: "sarufi-bar sarufi-duration__bar" },
                        React.createElement("input", { type: "range", id: "progress", disabled: !mediaDuration, step: 0.0001, value: currentTime && currentTime * 1000, max: mediaDuration && mediaDuration * 1000, onChange: changeProgressBar }))))))) : null));
    };
    return (React.createElement(React.Fragment, null,
        loading ? (React.createElement("div", { style: {
                background: mode === "dark" ? "rgba(255, 255, 255, .1)" : "rgba(0,0,0,.1)",
                borderRadius: ".3rem",
                padding: ".5rem",
                fontSize: 14,
                display: "flex",
                justifyContent: "center",
            } },
            React.createElement(ChatLoader, null))) : null,
        React.createElement("div", { className: "sarufi-video-player", style: __assign({}, style) },
            React.createElement("video", { key: url, id: mediaId, disablePictureInPicture: true, controlsList: "nodownload", src: url, onContextMenu: function (e) {
                    e.preventDefault();
                }, style: {
                    maxWidth: "100%",
                    height: loading || !(video === null || video === void 0 ? void 0 : video.duration) || ((_b = video === null || video === void 0 ? void 0 : video.error) === null || _b === void 0 ? void 0 : _b.code) || !video
                        ? "0"
                        : "auto",
                    display: loading || !(video === null || video === void 0 ? void 0 : video.duration) || ((_c = video === null || video === void 0 ? void 0 : video.error) === null || _c === void 0 ? void 0 : _c.code) || !video
                        ? "none"
                        : "block",
                    width: "100%",
                    objectFit: "cover",
                    borderRadius: ".3rem",
                } },
                React.createElement("source", { src: url, type: "video/mp4" }),
                React.createElement("span", null, "Your Browser does not support this video format")),
            (video === null || video === void 0 ? void 0 : video.duration) ? React.createElement(Controllers, { showBottomControllers: false }) : null,
            React.createElement(Modal, { mode: mode !== null && mode !== void 0 ? mode : "light", open: isFullScreen, close: function () { return setFullScreen(false); }, closeWithBackdrop: true },
                React.createElement("div", { className: "sarufi-video-player", style: __assign({ maxWidth: "calc( 100vw - 30px )", maxHeight: "calc( 100vh - 180px )", width: "100%", height: "auto" }, style) },
                    React.createElement("video", { key: url, id: mediaId + "-preview", disablePictureInPicture: true, controlsList: "nodownload", src: url, onContextMenu: function (e) {
                            e.preventDefault();
                        }, onClick: togglePlay, style: {
                            maxWidth: "calc( 100vw - 30px )",
                            maxHeight: "calc( 100vh - 180px )",
                            width: "100%",
                            height: "auto",
                            objectFit: "cover",
                            display: "block",
                        } },
                        React.createElement("source", { src: url, type: "video/mp4" }),
                        React.createElement("span", null, "Your Browser does not support this video format")),
                    React.createElement(Controllers, { showBottomControllers: true }),
                    React.createElement("div", { className: "sarufi-flex-center" },
                        React.createElement("div", { style: {
                                textAlign: "center",
                                fontFamily: fontFamily === "InterRegular"
                                    ? "'Inter', sans-serif"
                                    : fontFamily === "PoppinsRegular"
                                        ? "'Poppins', sans-serif"
                                        : fontFamily === "inherit"
                                            ? "inherit"
                                            : "'Inter', sans-serif",
                                fontSize: fontSize,
                                color: "white",
                                marginTop: ".3rem",
                            } }, caption))))),
        (video === null || video === void 0 ? void 0 : video.error) && !(video === null || video === void 0 ? void 0 : video.duration) && !loading && (React.createElement("div", { style: {
                color: mode === "dark" ? "#e76262" : "red",
                background: mode === "dark" ? "rgba(255, 255, 255, .1)" : "rgba(0,0,0,.1)",
                borderRadius: ".3rem",
                padding: ".5rem",
                fontSize: 14,
            } }, ((_d = video === null || video === void 0 ? void 0 : video.error) === null || _d === void 0 ? void 0 : _d.code) === 1
            ? "Loading video resorces was aborted"
            : ((_e = video === null || video === void 0 ? void 0 : video.error) === null || _e === void 0 ? void 0 : _e.code) === 2
                ? "Failed to play video due to network error"
                : ((_f = video === null || video === void 0 ? void 0 : video.error) === null || _f === void 0 ? void 0 : _f.code) === 3
                    ? "Failed to decode video resorces"
                    : ((_g = video === null || video === void 0 ? void 0 : video.error) === null || _g === void 0 ? void 0 : _g.code) === 4
                        ? "Video resources not supported"
                        : "Failed to load video resources"))));
};
export default VideoPreview;
