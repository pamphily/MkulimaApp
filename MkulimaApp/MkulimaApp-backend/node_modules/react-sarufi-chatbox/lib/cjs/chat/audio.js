"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var icons_1 = require("../assets/icons");
var chat_loader_1 = __importDefault(require("./chat-loader"));
var AudioPreview = function (_a) {
    var _b, _c, _d, _e, _f;
    var url = _a.url, fontSize = _a.fontSize, mediaId = _a.mediaId, mode = _a.mode;
    var _g = (0, react_1.useState)(false), isPlaying = _g[0], setPlaying = _g[1];
    var _h = (0, react_1.useState)(0), currentTimeInSec = _h[0], setCurrentTimeInSec = _h[1];
    var _j = (0, react_1.useState)(0), currentTimeInMin = _j[0], setCurrentTimeInMin = _j[1];
    var _k = (0, react_1.useState)(0), bufferedRange = _k[0], setBufferRange = _k[1];
    var _l = (0, react_1.useState)(0), mediaDurationInSec = _l[0], setmediaDurationInSec = _l[1];
    var _m = (0, react_1.useState)(0), mediaDurationInMin = _m[0], setmediaDurationInMin = _m[1];
    var _o = (0, react_1.useState)(0), currentTime = _o[0], setCurrentTime = _o[1];
    var _p = (0, react_1.useState)(0), mediaDuration = _p[0], setmediaDuration = _p[1];
    var _q = (0, react_1.useState)(false), isBuffering = _q[0], setBuffering = _q[1];
    var _r = (0, react_1.useState)(0), seekBeforeWidth = _r[0], setSeekBeforeWidth = _r[1];
    var _s = (0, react_1.useState)(true), loading = _s[0], setLoading = _s[1];
    var audio = document.querySelector("audio#".concat(mediaId));
    var togglePlay = function () {
        if (audio && mediaDuration) {
            // audio
            if (audio.paused) {
                audio.play();
                setPlaying(true);
                var audio_elements = document.getElementsByTagName("audio");
                for (var i = 0; i < audio_elements.length; i++) {
                    var audio_element = audio_elements[i];
                    if (audio_element.id !== mediaId) {
                        audio_element.pause();
                    }
                }
                var video_elements = document.getElementsByTagName("video");
                for (var i = 0; i < video_elements.length; i++) {
                    var video_element = video_elements[i];
                    video_element.pause();
                }
            }
            else {
                audio.pause();
                setPlaying(false);
            }
        }
    };
    var changeProgressBar = function (e) {
        var value = e.target.value;
        setCurrentTime(value / 1000);
        if (audio && mediaDuration) {
            audio.currentTime = value / 1000;
        }
    };
    (0, react_1.useEffect)(function () {
        setSeekBeforeWidth((currentTime / mediaDuration) * 100);
    }, [currentTime]);
    (0, react_1.useEffect)(function () {
        if (audio) {
            audio.onwaiting = function () {
                setBuffering(true);
            };
            audio.onplaying = function () {
                setBuffering(false);
            };
            audio.onerror = function () {
                setLoading(false);
            };
            audio.onloadeddata = function () {
                setCurrentTimeInSec(audio.currentTime % 60);
                setCurrentTimeInMin((audio.currentTime / 60) % 60);
                setmediaDurationInSec(audio.duration % 60);
                setmediaDurationInMin((audio.duration / 60) % 60);
                setmediaDuration(audio.duration);
                setCurrentTime(audio.currentTime);
                setLoading(false);
                setBuffering(false);
            };
            audio.ontimeupdate = function () {
                var _a, _b;
                if (audio && audio.currentTime) {
                    setCurrentTimeInSec(audio.currentTime % 60);
                    setCurrentTimeInMin((audio.currentTime / 60) % 60);
                    setCurrentTime(audio.currentTime);
                    setSeekBeforeWidth((currentTime / mediaDuration) * 100);
                }
                if (audio && audio.duration) {
                    setmediaDurationInSec((audio === null || audio === void 0 ? void 0 : audio.duration) % 60);
                    setmediaDurationInMin(((audio === null || audio === void 0 ? void 0 : audio.duration) / 60) % 60);
                    setmediaDuration(audio.duration);
                    setBufferRange((_a = audio === null || audio === void 0 ? void 0 : audio.buffered) === null || _a === void 0 ? void 0 : _a.end(((_b = audio === null || audio === void 0 ? void 0 : audio.buffered) === null || _b === void 0 ? void 0 : _b.length) - 1));
                }
            };
            audio.onended = function () {
                setCurrentTime(0);
                setCurrentTimeInSec(0);
                setCurrentTimeInMin(0);
                setSeekBeforeWidth(0);
                setBufferRange(0);
                setPlaying(false);
            };
        }
    }, [isPlaying, audio]);
    (0, react_1.useEffect)(function () {
        if (audio) {
            if (audio.played) {
                setPlaying(true);
            }
            if (audio.paused) {
                setPlaying(false);
            }
        }
    }, [audio === null || audio === void 0 ? void 0 : audio.played, audio === null || audio === void 0 ? void 0 : audio.paused]);
    var style = {
        "--sarufi-audio-seek-before-width": seekBeforeWidth + "%",
        "--sarufi-audio-buffer-before-width": (bufferedRange / mediaDuration) * 100 + "%",
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        loading ? (react_1.default.createElement("div", { style: {
                padding: ".5rem",
                fontSize: 14,
                display: "flex",
                justifyContent: "center",
            } },
            react_1.default.createElement(chat_loader_1.default, null))) : null,
        (audio === null || audio === void 0 ? void 0 : audio.duration) && !((_b = audio === null || audio === void 0 ? void 0 : audio.error) === null || _b === void 0 ? void 0 : _b.code) && !loading ? (react_1.default.createElement("div", { style: __assign({}, style), className: "sarufi-audio-player" },
            react_1.default.createElement("div", { style: {
                    margin: ".5rem 0 .5rem",
                    width: "100%",
                }, className: "sarufi-flex-start" },
                react_1.default.createElement("button", { className: "sarufi-flex-start sarufi-button", onClick: togglePlay, style: {
                        background: "none",
                        border: "none",
                        height: "40px",
                        width: "40px",
                        color: "var(--sarufi-sent-boxt-color)",
                        cursor: "pointer",
                    }, accessKey: "Space", type: "button" },
                    react_1.default.createElement("span", { title: isPlaying ? "Pause" : "Play" }, isBuffering ? (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement(chat_loader_1.default, { fromPlay: true }))) : (react_1.default.createElement(react_1.default.Fragment, null, !isPlaying ? react_1.default.createElement(icons_1.Play, null) : react_1.default.createElement(icons_1.Pause, null))))),
                react_1.default.createElement("div", { style: {
                        width: "calc( 100% - 50px )",
                    } },
                    react_1.default.createElement("div", { className: "sarufi-bar sarufi-duration__bar" },
                        react_1.default.createElement("input", { type: "range", id: "progress", disabled: !mediaDuration, step: 0.0001, value: currentTime && currentTime * 1000, max: mediaDuration && mediaDuration * 1000, onChange: changeProgressBar })),
                    mediaDuration > 0 && (react_1.default.createElement("div", { className: "", style: {
                            fontSize: Number(fontSize) * 0.8,
                        } },
                        react_1.default.createElement("div", { className: "sarufi-flex-wide sarufi-duration" },
                            isPlaying && (react_1.default.createElement("div", null,
                                react_1.default.createElement("span", null, currentTimeInMin < 10
                                    ? "0".concat(Math.floor(currentTimeInMin))
                                    : Math.floor(currentTimeInMin)),
                                "\u00A0:\u00A0",
                                react_1.default.createElement("span", null, currentTimeInSec < 10
                                    ? "0".concat(Math.floor(currentTimeInSec))
                                    : "".concat(Math.floor(currentTimeInSec))))),
                            !isPlaying && (react_1.default.createElement("div", null,
                                react_1.default.createElement("span", null, mediaDurationInMin < 10
                                    ? "0".concat(Math.floor(mediaDurationInMin))
                                    : Math.floor(mediaDurationInMin)),
                                "\u00A0:\u00A0",
                                react_1.default.createElement("span", null, mediaDurationInSec < 10
                                    ? "0".concat(Math.floor(mediaDurationInSec))
                                    : "".concat(Math.floor(mediaDurationInSec)))))))))))) : null,
        (audio === null || audio === void 0 ? void 0 : audio.error) && !(audio === null || audio === void 0 ? void 0 : audio.duration) && !loading && (react_1.default.createElement("div", { style: {
                color: mode === "dark" ? "#e76262" : "red",
                borderRadius: ".3rem",
                padding: ".3rem 0",
                fontSize: 14,
            } }, ((_c = audio === null || audio === void 0 ? void 0 : audio.error) === null || _c === void 0 ? void 0 : _c.code) === 1
            ? "Loading audio resorces was aborted"
            : ((_d = audio === null || audio === void 0 ? void 0 : audio.error) === null || _d === void 0 ? void 0 : _d.code) === 2
                ? "Failed to play audio due to network error"
                : ((_e = audio === null || audio === void 0 ? void 0 : audio.error) === null || _e === void 0 ? void 0 : _e.code) === 3
                    ? "Failed to decode audio resorces"
                    : ((_f = audio === null || audio === void 0 ? void 0 : audio.error) === null || _f === void 0 ? void 0 : _f.code) === 4
                        ? "Audio resources not supported"
                        : "Failed to load audio resources")),
        react_1.default.createElement("audio", { key: url, id: mediaId, src: url !== null && url !== void 0 ? url : "", style: {
                display: "none",
            } })));
};
exports.default = AudioPreview;
