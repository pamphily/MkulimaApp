"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
// Local imports
var icons_1 = require("../../assets/icons");
var RecordAudio = function (_a) {
    var _b = _a.maxSize, maxSize = _b === void 0 ? 5 * 1024 * 1024 : _b, readFile = _a.readFile, disabled = _a.disabled, saveIsRecording = _a.saveIsRecording;
    var _c = (0, react_1.useState)(false), isRecording = _c[0], setIsRecording = _c[1];
    var _d = (0, react_1.useState)(0), recordingDuration = _d[0], setRecordingDuration = _d[1];
    var _e = (0, react_1.useState)(0), currentPlayingTime = _e[0], setCurrentPlayingTime = _e[1];
    var _f = (0, react_1.useState)(false), isPlaying = _f[0], setIsPlaying = _f[1];
    var _g = (0, react_1.useState)({
        file: null,
        blob: "",
        error: "",
        fileBuffer: null,
    }), recordedAudio = _g[0], setRecordedAudio = _g[1];
    var mediaRecorderRef = (0, react_1.useRef)(null);
    var chunksRef = (0, react_1.useRef)([]);
    var intervalRef = (0, react_1.useRef)(null);
    var audioPlayerRef = (0, react_1.useRef)(null);
    var generateRandomFileName = function () {
        var randomString = Math.random().toString(36).substring(2, 8);
        return "recorded_audio_".concat(randomString, ".wav");
    };
    var handleStartRecording = function () { return __awaiter(void 0, void 0, void 0, function () {
        var stream, mediaRecorder, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.mediaDevices)) {
                        throw new Error("Media not supported");
                    }
                    return [4 /*yield*/, navigator.mediaDevices.getUserMedia({
                            audio: true,
                        })];
                case 1:
                    stream = _a.sent();
                    mediaRecorder = new MediaRecorder(stream);
                    mediaRecorder.ondataavailable = function (e) {
                        if (e.data.size > 0) {
                            chunksRef.current.push(e.data);
                        }
                    };
                    mediaRecorder.onstop = function () {
                        var audioBlob = new Blob(chunksRef.current, { type: "audio/wav" });
                        var blob = URL.createObjectURL(audioBlob);
                        var file = new File([audioBlob], generateRandomFileName(), {
                            type: "audio/wav",
                        });
                        var error = file.size > maxSize ? "File size exceeds 5 MB" : "";
                        // read file first
                        var reader = new FileReader();
                        reader.onload = function () {
                            setRecordedAudio({
                                file: file,
                                blob: blob,
                                error: error,
                                fileBuffer: reader.result,
                            });
                        };
                        reader.readAsArrayBuffer(file);
                    };
                    mediaRecorderRef.current = mediaRecorder;
                    mediaRecorder.start();
                    setIsRecording(true);
                    saveIsRecording(true);
                    intervalRef.current = window.setInterval(function () {
                        setRecordingDuration(function (prevDuration) { return prevDuration + 1; });
                    }, 1000);
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    console.error(error_1);
                    setRecordedAudio({
                        file: null,
                        blob: "",
                        error: "Failed to record audio",
                        fileBuffer: null,
                    });
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    var handleStopRecording = function () {
        if (mediaRecorderRef.current && isRecording) {
            mediaRecorderRef.current.stop();
            mediaRecorderRef.current = null;
            clearInterval(intervalRef.current);
            chunksRef.current = [];
            setIsPlaying(false);
            setCurrentPlayingTime(0);
            setIsRecording(false);
            window.clearInterval(intervalRef.current);
        }
    };
    var submit = function () {
        if ((recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.file) && (recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.fileBuffer)) {
            if (recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.error) {
                return;
            }
            readFile(recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.file, recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob, recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.error, recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.fileBuffer);
            setRecordedAudio({
                file: null,
                blob: "",
                error: "",
                fileBuffer: null,
            });
            setRecordingDuration(0);
            saveIsRecording(false);
        }
    };
    var formatDuration = function (seconds) {
        seconds = Math.floor(seconds); // Ensure we're working with whole seconds
        var mins = Math.floor(seconds / 60);
        var secs = seconds % 60;
        return "".concat(mins.toString().padStart(2, "0"), ":").concat(secs
            .toString()
            .padStart(2, "0"));
    };
    var handlePlayPause = function () {
        if (audioPlayerRef.current) {
            if (isPlaying) {
                audioPlayerRef.current.pause();
            }
            else {
                audioPlayerRef.current.play();
            }
            setIsPlaying(function (prevIsPlaying) { return !prevIsPlaying; });
        }
    };
    var handleAudioEnd = function () {
        setIsPlaying(false);
        setCurrentPlayingTime(0);
    };
    var handleTimeUpdate = function () {
        if (audioPlayerRef.current) {
            setCurrentPlayingTime(audioPlayerRef.current.currentTime);
        }
    };
    return (react_1.default.createElement("div", { style: {
            position: "relative",
            cursor: "pointer",
            display: "flex",
            width: isRecording || (recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob) ? "100%" : "auto",
        } },
        !isRecording && !(recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob) && (react_1.default.createElement("button", { title: "Record Audio", onClick: handleStartRecording, disabled: isRecording || disabled, style: {
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
                alignItems: "center",
                gap: "0.5rem",
            } },
            react_1.default.createElement(icons_1.MicIcon, { size: 20 }))),
        (isRecording || (recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob)) && (react_1.default.createElement("button", { onClick: function () {
                if (recordedAudio.blob) {
                    setRecordedAudio({
                        file: null,
                        blob: "",
                        error: "",
                        fileBuffer: null,
                    });
                    setRecordingDuration(0);
                    saveIsRecording(false);
                }
                else
                    handleStopRecording();
            }, disabled: !isRecording || disabled, style: {
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
                alignItems: "center",
                gap: "0.5rem",
            } },
            react_1.default.createElement(icons_1.CancelRecordIcon, { size: 24 }))),
        isRecording && !(recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob) && (react_1.default.createElement("div", { style: {
                // position: "absolute",
                right: "1rem",
                bottom: "1rem",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                gap: "0.5rem",
            } },
            react_1.default.createElement("span", null, formatDuration(recordingDuration)))),
        (recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob) && (react_1.default.createElement("div", { style: {
                display: "flex",
                // flexDirection: "column",
                alignItems: "center",
                justifyContent: "space-between",
                gap: "0.5rem",
                width: "100%",
            } },
            react_1.default.createElement("div", { style: {
                    display: "flex",
                    alignItems: "center",
                } },
                react_1.default.createElement("audio", { ref: audioPlayerRef, key: recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob, onEnded: handleAudioEnd, onTimeUpdate: handleTimeUpdate, style: {
                        display: "none",
                    } },
                    react_1.default.createElement("source", { src: recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.blob, type: "audio/wav" }),
                    "Your browser does not support the audio element."),
                react_1.default.createElement("div", { style: {
                        marginRight: "1rem",
                    } },
                    react_1.default.createElement("button", { onClick: handlePlayPause }, isPlaying ? react_1.default.createElement(icons_1.Pause, { size: 20 }) : react_1.default.createElement(icons_1.Play, { size: 20 }))),
                react_1.default.createElement("p", null,
                    formatDuration(currentPlayingTime),
                    " :",
                    " ",
                    formatDuration(recordingDuration))),
            react_1.default.createElement("button", { onClick: submit, disabled: !!(recordedAudio === null || recordedAudio === void 0 ? void 0 : recordedAudio.error) || disabled, style: {
                    color: "var(--sarufi-primary-color)",
                } },
                react_1.default.createElement(icons_1.SendIcon, { size: 24 }))))));
};
exports.default = RecordAudio;
